---
import type { ImageMetadata } from 'astro';
import { Font } from 'astro:assets';
import DefaultOpenGraphImage from '~assets/og-image.webp';

type OpenGraphProtocol = {
    type: 'website'
    image: {
      _: ImageMetadata,
      alt: string
    }
} | {
    type: 'article';
    image: {
      _: ImageMetadata,
      alt: string
    }
    article: {
      publishedTime: string;
      modifiedTime: string;
      tags: string[];
    }
};

export interface HeadProps {
	title: string;
	description: string;
	ogp: OpenGraphProtocol;
}

export type Props = Partial<HeadProps>;

const siteName = "Krish Gupta's Blog"
const siteUrl = new URL(Astro.url.pathname, Astro.site);

const defaultProps = {
  title: siteName,
  description: "The Home of Krish Gupta on the Internet. Articles on Web Development, Programming, Tech and more.",
  ogp: {
    type: 'website',
    image: {
      _: DefaultOpenGraphImage,
      alt: 'Krish Gupta about Web Development, Programming, Tech and more.',
    }
  }
} as HeadProps;

const props = Astro.props;

const { title, description } = { ...defaultProps, ...props };
const { type, image } = { ...defaultProps.ogp, ...props.ogp };
---

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="sitemap" href="/sitemap-index.xml" />
<link
	rel="alternate"
	type="application/rss+xml"
	title={siteName}
	href={new URL('rss.xml', Astro.site)}
/>

<link rel="canonical" href={siteUrl} />

<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Favicon -->

<link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="shortcut icon" href="/favicon.ico" />
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
<meta name="apple-mobile-web-app-title" content="Krish Gupta" />
<link rel="manifest" href="/site.webmanifest" />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:site_name" content={siteName} />
<meta property="og:description" content={description} />

<meta property="og:image" content={new URL(image._.src, Astro.url)} />
<meta property="og:image:width" content={image._.width.toString()} />
<meta property="og:image:height" content={image._.height.toString()} />
<meta property="og:image:alt" content={image.alt} />

{Astro.props.ogp?.type == 'article' && (
  <meta property="og:article:published_time" content={Astro.props.ogp.article.publishedTime} />
  <meta property="og:article:modified_time" content={Astro.props.ogp.article.modifiedTime} />
  <meta property="og:article:author" content="Krish Gupta" />
  <meta property="og:article:author:username" content="kkrishguptaa" />
)}

{Astro.props.ogp?.type == 'article' && Astro.props.ogp.article.tags.map((tag) => (
  <meta property="og:article:tag" content={tag} />
))}

<!-- Twitter -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:url" content={Astro.url} />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={new URL(image._.src, Astro.url)} />
<meta name="twitter:image:alt" content={image.alt} />
<meta name="twitter:creator" content="@kkrishguptaa" />
<meta name="twitter:site" content="@kkrishguptaa" />

<Font cssVariable='--font-space-grotesk' />
<Font cssVariable='--font-lexend' />
